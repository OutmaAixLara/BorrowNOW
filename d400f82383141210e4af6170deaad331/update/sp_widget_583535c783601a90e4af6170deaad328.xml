<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[(function() {
    // Initialize data and call server-side script
    var c = this;
    
    c.cancel = function(recordId) {
        // Call the server-side script to cancel the borrowing
        var ga = new GlideAjax('YourServerScriptName');
        ga.addParam('sys_id', recordId);
        ga.addParam('action', 'cancel');
        ga.getXMLAnswer(function(response) {
            var result = JSON.parse(response);
            if (result.success) {
                alert('Ausleihe stornieren successful.');
                location.reload(); // Reload the page to reflect changes
            } else {
                alert('Error: ' + result.errorMessage);
            }
        });
    };
    
    c.extend = function(recordId) {
        // Call the server-side script to extend the borrowing
        var ga = new GlideAjax('YourServerScriptName');
        ga.addParam('sys_id', recordId);
        ga.addParam('action', 'extend');
        ga.getXMLAnswer(function(response) {
            var result = JSON.parse(response);
            if (result.success) {
                alert('Ausleihe verlängern successful.');
                location.reload(); // Reload the page to reflect changes
            } else {
                alert('Error: ' + result.errorMessage);
            }
        });
    };
    
    c.requestReturn = function(recordId) {
        // Call the server-side script to request return
        var ga = new GlideAjax('YourServerScriptName');
        ga.addParam('sys_id', recordId);
        ga.addParam('action', 'requestReturn');
        ga.getXMLAnswer(function(response) {
            var result = JSON.parse(response);
            if (result.success) {
                alert('Rückgabe anfordern successful.');
                location.reload(); // Reload the page to reflect changes
            } else {
                alert('Error: ' + result.errorMessage);
            }
        });
    };
    
    // Fetch records
    c.records = [];
    var ga = new GlideAjax('YourServerScriptName');
    ga.addParam('action', 'fetchRecords');
    ga.getXMLAnswer(function(response) {
        c.records = JSON.parse(response);
    });
})();
]]></client_script>
        <controller_as>c</controller_as>
        <css>/* Add custom styles for the list */
.table {
    width: 100%;
    margin-top: 20px;
}

.table th, .table td {
    text-align: center;
}

.table th {
    background-color: #f8f9fa;
}
</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>true</has_preview>
        <id>ausleihe_liste</id>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {
  
}]]></link>
        <name>Ausleihe Liste</name>
        <option_schema/>
        <public>true</public>
        <roles/>
        <script><![CDATA[(function() {
    data.records = [];
    
    // Use GlideRecord to get records for the current user
    var gr = new GlideRecord('x_1521148_borrowno_ausleihe');
    
    // Check if the current user has the role 'x_1521148_borrowno.ausleiher_user'
    if (gs.hasRole('x_1521148_borrowno.ausleiher_user')) {
        // Add a query to filter records where 'ausleiher' is the current user
        gr.addQuery('ausleiher', gs.getUserID());
    }
    
    // Optionally, check if the user has the 'admin' role
    if (gs.hasRole('admin') || gs.hasRole('x_1521148_borrowno.verleiher_user')) {
        // Admins and verleiher users can see all records, so do not add a user filter
    }
    
    gr.query();
    while (gr.next()) {
        data.records.push({
            sys_id: gr.getValue('sys_id'),
            equipment: gr.getDisplayValue('equipment'),
            borrow_date: gr.getValue('ausleihdatum'),
            return_date: gr.getValue('rueckgabedatum'),
            status: gr.getValue('status')
        });
    }
})();
]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-14 13:24:26</sys_created_on>
        <sys_id>583535c783601a90e4af6170deaad328</sys_id>
        <sys_mod_count>1</sys_mod_count>
        <sys_name>Ausleihe Liste</sys_name>
        <sys_package display_value="BorrowNOW" source="x_1521148_borrowno">d400f82383141210e4af6170deaad331</sys_package>
        <sys_policy/>
        <sys_scope display_value="BorrowNOW">d400f82383141210e4af6170deaad331</sys_scope>
        <sys_update_name>sp_widget_583535c783601a90e4af6170deaad328</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-14 13:25:52</sys_updated_on>
        <template><![CDATA[<div class="widget-content">
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Equipment</th>
                <th>Borrow Date</th>
                <th>Return Date</th>
                <th>Status</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            <tr ng-repeat="record in c.records">
                <td>{{ record.equipment }}</td>
                <td>{{ record.borrow_date }}</td>
                <td>{{ record.return_date }}</td>
                <td>{{ record.status }}</td>
                <td>
                    <!-- Actions such as cancel, extend, request return -->
                    <button ng-if="record.status == 'angefragt'" class="btn btn-danger" ng-click="c.cancel(record.sys_id)">Cancel</button>
                    <button ng-if="record.status == 'genehmigt'" class="btn btn-warning" ng-click="c.extend(record.sys_id)">Extend</button>
                    <button ng-if="record.status == 'genehmigt'" class="btn btn-info" ng-click="c.requestReturn(record.sys_id)">Request Return</button>
                </td>
            </tr>
        </tbody>
    </table>
</div>
]]></template>
    </sp_widget>
</record_update>
